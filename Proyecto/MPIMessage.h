// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MPIMessage.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _MPIMESSAGE_MPIMESSAGE_H_
#define _MPIMESSAGE_MPIMESSAGE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MPIMessage_SOURCE)
#define MPIMessage_DllAPI __declspec( dllexport )
#else
#define MPIMessage_DllAPI __declspec( dllimport )
#endif // MPIMessage_SOURCE
#else
#define MPIMessage_DllAPI
#endif
#else
#define MPIMessage_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace MPIMessage
{
    const int32_t MAX_SIZE = 100000;
    typedef std::vector<uint8_t> OctetSequence;
    /*!
     * @brief This class represents the structure Message defined by the user in the IDL file.
     * @ingroup MPIMESSAGE
     */
    class Message
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Message();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Message();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object MPIMessage::Message that will be copied.
         */
        eProsima_user_DllExport Message(const Message &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object MPIMessage::Message that will be copied.
         */
        eProsima_user_DllExport Message(Message &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object MPIMessage::Message that will be copied.
         */
        eProsima_user_DllExport Message& operator=(const Message &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object MPIMessage::Message that will be copied.
         */
        eProsima_user_DllExport Message& operator=(Message &&x);

        /*!
         * @brief This function copies the value in member buffer
         * @param _buffer New value to be copied in member buffer
         */
        eProsima_user_DllExport void buffer(const MPIMessage::OctetSequence &_buffer);

        /*!
         * @brief This function moves the value in member buffer
         * @param _buffer New value to be moved in member buffer
         */
        eProsima_user_DllExport void buffer(MPIMessage::OctetSequence &&_buffer);

        /*!
         * @brief This function returns a constant reference to member buffer
         * @return Constant reference to member buffer
         */
        eProsima_user_DllExport const MPIMessage::OctetSequence& buffer() const;

        /*!
         * @brief This function returns a reference to member buffer
         * @return Reference to member buffer
         */
        eProsima_user_DllExport MPIMessage::OctetSequence& buffer();
        /*!
         * @brief This function sets a value in member senderRank
         * @param _senderRank New value for member senderRank
         */
        eProsima_user_DllExport void senderRank(int32_t _senderRank);

        /*!
         * @brief This function returns the value of member senderRank
         * @return Value of member senderRank
         */
        eProsima_user_DllExport int32_t senderRank() const;

        /*!
         * @brief This function returns a reference to member senderRank
         * @return Reference to member senderRank
         */
        eProsima_user_DllExport int32_t& senderRank();

        /*!
         * @brief This function sets a value in member recipientRank
         * @param _recipientRank New value for member recipientRank
         */
        eProsima_user_DllExport void recipientRank(int32_t _recipientRank);

        /*!
         * @brief This function returns the value of member recipientRank
         * @return Value of member recipientRank
         */
        eProsima_user_DllExport int32_t recipientRank() const;

        /*!
         * @brief This function returns a reference to member recipientRank
         * @return Reference to member recipientRank
         */
        eProsima_user_DllExport int32_t& recipientRank();

        /*!
         * @brief This function sets a value in member tag
         * @param _tag New value for member tag
         */
        eProsima_user_DllExport void tag(int32_t _tag);

        /*!
         * @brief This function returns the value of member tag
         * @return Value of member tag
         */
        eProsima_user_DllExport int32_t tag() const;

        /*!
         * @brief This function returns a reference to member tag
         * @return Reference to member tag
         */
        eProsima_user_DllExport int32_t& tag();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const MPIMessage::Message& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        MPIMessage::OctetSequence m_buffer;
        int32_t m_senderRank;
        int32_t m_recipientRank;
        int32_t m_tag;
    };
}

#endif // _MPIMESSAGE_MPIMESSAGE_H_